---
- name: Setup k8s
  hosts: all
  become: true
  tasks:
    - name: Update system
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install systemd-timesyncd
      apt:
        name: systemd-timesyncd
        state: present

    - name: Enable NTP sync
      command: timedatectl set-ntp true

    - name: Create kernel modules config file
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Configure sysctl for Kubernetes
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: Apply sysctl settings
      command: sysctl --system

    - name: Install required tools
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Ensure apt keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Kubernetes apt key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | \
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /

    - name: Install Kubernetes tools
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        update_cache: yes
        state: present

    - name: Hold Kubernetes packages
      shell: |
        apt-mark hold kubelet kubeadm kubectl
      changed_when: false
      become: true
      tags: [hold]

    - name: Add Docker apt key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Install containerd
      apt:
        name: containerd.io
        update_cache: yes
        state: present

    - name: Remove old containerd config
      file:
       path: /etc/containerd/config.toml
       state: absent

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Generate default containerd config
      shell: containerd config default | sudo tee /etc/containerd/config.toml
      args:
       creates: /etc/containerd/config.toml

    - name: Ensure runc runtime_type is set correctly
      become: true
      tags: [runc]
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*)runtime_type\s*=.*'
        line: '            runtime_type = "io.containerd.runc.v2"'
        insertafter: '^\[plugins\."io\.containerd\.grpc\.v1\.cri"\.containerd\.runtimes\.runc\]'

    - name: Ensure SystemdCgroup is set to true
      become: true
      tags: [runc]
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*)SystemdCgroup\s*=.*'
        line: '            SystemdCgroup = true'
        insertafter: '^\[plugins\."io\.containerd\.grpc\.v1\.cri"\.containerd\.runtimes\.runc\.options\]'

    - name: Restart containerd service
      service:
        name: containerd
        state: restarted

    - name: Ensure containerd service is running
      service:
        name: containerd
        enabled: true
        
    - name: Modify crictl config file
      become: true
      copy:
        dest: /etc/crictl.yaml
        content: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          timeout: 2
          debug: false
          pull-image-on-create: false 
      tags: [crictl]

    - name: Enable kubelet service
      systemd:
        name: kubelet
        enabled: true

- name: Setup k8s on control node
  hosts: masters
  vars_files:
   - vault.yml
  vars:
    virtual_router_ip: 192.168.19.24
    control_plane_node: "k8s-control-node"
    cloudstack_api_url: "http://192.168.19.10:8080/client/api"
    ansible_python_interpreter: /usr/bin/python3
  become: true
  tasks:
    - name: Add load balancer rule for the api server
      ngine_io.cloudstack.cs_loadbalancer_rule:
        name: k8s-api-lb-rule
        public_ip: "{{ virtual_router_ip }}"
        public_port: 6443
        private_port: 6443
        algorithm: roundrobin
        api_key: "{{ cloudstack_api_key }}"
        api_secret: "{{ cloudstack_api_secret }}"
        api_url: "{{ cloudstack_api_url }}"
      become: false

    - name: add controller node to load balancer
      ngine_io.cloudstack.cs_loadbalancer_rule_member:
        name: k8s-api-lb-rule
        vms: "{{ control_plane_node }}"
        api_key: "{{ cloudstack_api_key }}"
        api_secret: "{{ cloudstack_api_secret }}"
        api_url: "{{ cloudstack_api_url }}"
      become: false

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket unix:///var/run/containerd/containerd.sock --control-plane-endpoint=192.168.19.24:6443 --apiserver-cert-extra-sans=192.168.19.24  --v=5
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Create .kube directory
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        mode: '0755'

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config" 
        remote_src: yes
      become: true
      tags: kubeconfig

    - name: Set ownership of kube config file to current user
      file:
        path: "/home/{{ ansible_user }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      
    - name: Install Kubernetes network plugin (Weave Net)
      command: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
   
    - name: Restart control plane server
      service:
        name: kubelet
        state: restarted

    - name: Wait until control plane node is Ready
      shell: |
        kubectl get nodes --no-headers | grep -E 'control-plane|master' | grep -w "Ready"
      register: control_plane_status
      retries: 30           
      delay: 10           
      until: control_plane_status.rc == 0
      changed_when: false
    
    - name: copy join command to file
      command: kubeadm token create --print-join-command
      register: join_command

    - name: save join command to file
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: ./join-command
      delegate_to: localhost
      become: false

- name: Add worker nodes to cluster
  hosts: workers
  become: true
  tasks:
    - name: Join worker node to Kubernetes cluster
      become: true
      block:
        - name: copy join command to server
          copy:
            src: join-command
            dest: /tmp/join-command.sh
            mode: '0755'
        - name: Execute join command
          command: bash /tmp/join-command.sh
          args:
           creates: /etc/kubernetes/kubelet.conf
